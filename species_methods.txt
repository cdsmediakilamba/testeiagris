  // Species operations
  async getSpecies(id: number): Promise<Species | undefined> {
    const [speciesItem] = await db.select().from(species).where(eq(species.id, id));
    return speciesItem || undefined;
  }
  
  async getAllSpecies(): Promise<Species[]> {
    return await db.select().from(species);
  }
  
  async createSpecies(speciesData: InsertSpecies): Promise<Species> {
    const [newSpecies] = await db.insert(species).values(speciesData).returning();
    return newSpecies;
  }
  
  async updateSpecies(id: number, speciesData: Partial<Species>): Promise<Species | undefined> {
    const [updatedSpecies] = await db
      .update(species)
      .set(speciesData)
      .where(eq(species.id, id))
      .returning();
    return updatedSpecies || undefined;
  }
  
  // Método para gerar código de registro de animal
  async generateAnimalRegistrationCode(speciesId: number, farmId: number): Promise<string> {
    // Obter a espécie pelo ID
    const speciesItem = await this.getSpecies(speciesId);
    if (!speciesItem) {
      throw new Error("Espécie não encontrada");
    }
    
    const abbreviation = speciesItem.abbreviation;
    
    // Obter data atual no formato YYYYMMDD
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const dateString = `${year}${month}${day}`;
    
    // Consultar banco de dados para obter o último número sequencial para esta espécie, data e fazenda
    const pattern = `${abbreviation}-${dateString}-%`;
    
    // Buscar todos os animais da mesma espécie registrados na mesma data e fazenda
    const animalsWithSimilarCode = await db
      .select()
      .from(animals)
      .where(
        and(
          eq(animals.farmId, farmId),
          eq(animals.speciesId, speciesId)
        )
      );
    
    // Filtrar animais cujo código começa com o padrão e encontrar o maior número sequencial
    const regex = new RegExp(`^${abbreviation}-${dateString}-([0-9]{4})$`);
    let maxSequential = 0;
    
    // Para cada animal com pattern similar, extrair o número sequencial e encontrar o maior
    for (const animal of animalsWithSimilarCode) {
      if (!animal.registrationCode) continue;
      
      const match = animal.registrationCode.match(regex);
      if (match && match[1]) {
        const sequentialNumber = parseInt(match[1], 10);
        if (sequentialNumber > maxSequential) {
          maxSequential = sequentialNumber;
        }
      }
    }
    
    // Incrementar o contador e formatar com zeros à esquerda
    const newSequential = maxSequential + 1;
    const sequentialFormatted = String(newSequential).padStart(4, '0');
    
    // Gerar código no formato [ABREVIAÇÃO]-[YYYYMMDD]-[SEQUENCIAL]
    return `${abbreviation}-${dateString}-${sequentialFormatted}`;
  }